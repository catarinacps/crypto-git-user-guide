#+title: Utilizando um remoto git criptografado
#+author: Henrique Corrêa Pereira da Silva
#+email: hcpsilva@inf.ufrgs.br
#+infojs_opt:
#+options: tags:nil
#+language: pt_BR
#+property: cache yes

Bem-vindo! Nesse guia espero apresentar passo a passo a configuração e
utilização de uma máquina remota hospedando um repositório =git= criptografado,
assim como a criptografia do clone local do repositório.

Esse guia está subdividido a partir das duas perspectivas de potenciais
usuários: *administrador* e *desenvolvedor*. Isto é, focaremos inicialmente na
hospedagem de um servidor e na configuração inicial do repositório, e logo após
no /workflow/ do usuário utilizando esse servidor para trabalhar no repositório
ali hospedado.

* Sumário                                                          :TOC_3_gh:
- [[#preâmbulo][Preâmbulo]]
  - [[#git][=git=]]
  - [[#gnupg][=gnupg=]]
  - [[#git-remote-gcrypt][=git-remote-gcrypt=]]
  - [[#ecryptfs][=ecryptfs=]]
- [[#hospedando-o-servidor][Hospedando o servidor]]
  - [[#crie-um-usuário-chamado-git-e-um-diretório-ssh-para-ele][Crie um usuário chamado "git" e um diretório =.ssh= para ele]]
  - [[#adicione-os-colaboradores][Adicione os colaboradores]]
  - [[#crie-o-repositório-no-servidor][Crie o repositório no servidor]]
  - [[#inicialize-a-cópia-local][Inicialize a cópia local]]
    - [[#criando-um-diretório-criptografado][Criando um diretório criptografado]]
    - [[#importando-as-chaves-dos-colaboradores][Importando as chaves dos colaboradores]]
    - [[#criando-a-primeira-versão][Criando a primeira versão]]
  - [[#configure-o-usuário][Configure o usuário]]
- [[#utilizando-o-servidor][Utilizando o servidor]]
  - [[#clone-do-repositório][/Clone/ do repositório]]
  - [[#mount-e-unmount-do-diretório-privado-criptografado][/Mount/ e /Unmount/ do diretório privado criptografado]]
  - [[#trabalho-no-repositório][Trabalho no repositório]]
  - [[#utilização-de-submódulos][Utilização de submódulos]]

* Preâmbulo

Antes de criar ou de trabalhar com esse servidor remoto, necessitaremos de
algumas ferramentas instaladas nas nossas máquinas:

- [[https://git-scm.com/][git]]
- [[https://gnupg.org/][gnupg]]
- [[https://spwhitton.name/tech/code/git-remote-gcrypt/][git-remote-gcrypt]]
- [[https://ecryptfs.org/][ecryptfs]]

Nessas subseções abordaremos o processo de instalação dessas ferramentas.

** =git=

Criada por Linus Torvalds a fim de versionar atualizações ao kernel linux, essa
ferramenta está presente em todos os repositórios de pacotes de quaisquer
distribuições.

Dependendo de sua distribuição GNU/Linux, faça o seguinte para instalar o
pacote:

- Debian/Ubuntu :: =sudo apt-get install git=
- Fedora :: =sudo yum install git=
- OpenSUSE :: =sudo zypper install git=
- Arch :: =sudo pacman -S git=
- Gentoo :: =sudo apk add git=

Se utilizar Windows 10, considere habilitar o
[[https://docs.microsoft.com/pt-br/windows/wsl/install-win10][subsistema Windows
para Linux]] ou instale Git for Windows através desse
[[https://git-scm.com/download/win][link]].

** =gnupg=

A implementação do grupo GNU da especificação OpenPGP é uma das ferramentas mais
populares para criptografia de dados e gerenciamento de chaves, e está presente
em virtualmente todos os repositórios de pacotes de grandes distribuições.

Para instalar, faça o seguintes comandos, dependendo de sua distribuição:

- Debian/Ubuntu :: =sudo apt-get install gnupg=
- Fedora :: =sudo yum install gnupg=
- OpenSUSE :: =sudo zypper install gnupg=
- Arch :: =sudo pacman -S gnupg=
- Gentoo :: =sudo apk add gnupg=

** =git-remote-gcrypt=

Ferramenta que auxilia a criptografia completa de remotos utilizando chaves
públicas =gnupg= dos participantes do repositório.

Para instalar:

- Debian/Ubuntu :: =sudo apt-get install git-remote-gcrypt=
- AUR (Arch) :: =yay -Sa git-remote-gcrypt=

Caso você não utilize essas distribuições, siga os seguintes passos:

#+begin_src bash :exports code
# usuario@pc-local

git clone https://github.com/spwhitton/git-remote-gcrypt.git
cd git-remote-gcrypt
./install.sh
#+end_src

** =ecryptfs=

Chamado também de "gnupg para filesystems", essa é a ferramenta por trás da
criptografia do diretório Home nativa da distribuição Ubuntu. O código fonte da
ferramenta foi integrado no repositório do kernel Linux, e o pacote para a
utilização simples em linha de comando pode ser instalada da seguinte maneira:

- Debian/Ubuntu :: =sudo apt-get install ecryptfs-utils=
- Fedora :: =sudo yum install ecryptfs-utils=
- OpenSUSE :: =sudo zypper install ecryptfs-utils=
- Arch :: =sudo pacman -S ecryptfs-utils=
- Gentoo :: =sudo apk add ecryptfs-utils=

Podemos agora facilmente criar um diretório privado para cada usuário utilizando
essas ferramentas, porém note que, utilizando interfaces menos simples, é
possível criar mais diretórios transparentes.

* Hospedando o servidor

Primeiramente, no servidor remoto você só necessitará do programa =git=
instalado, além de um pacote que implementa o protocolo =ssh=, como o =OpenSSH=.

** Crie um usuário chamado "git" e um diretório =.ssh= para ele

Realize os seguintes comandos:

#+begin_src bash :exports code
# admin@servidor-remoto

sudo adduser git
su git
cd ~
# criando o repositório .ssh
mkdir .ssh && chmod 700 .ssh
touch .ssh/authorized_keys && chmod 600 .ssh/authorized_keys
#+end_src

** Adicione os colaboradores

Primeiro peça aos colaboradores que enviem suas chaves públicas:

#+begin_src bash :exports code
# usuario@pc-local

cat $HOME/.ssh/*.pub
# os nomes padrão para chaves são id_* e id_*.pub
#+end_src

Agora, adicione as chaves SSH dos colaboradores de repositórios nesse servidor.

#+begin_src bash :exports code
# git@servidor-remoto

cat <caminho para a chave pública de João> >> ~/.ssh/authorized_keys
cat <caminho para a chave pública de Maria> >> ~/.ssh/authorized_keys
cat <caminho para a chave pública de José> >> ~/.ssh/authorized_keys
#+end_src

** Crie o repositório no servidor

Com os usuários autorizados para a comunicação por SSH, inicie o repositório
numa pasta que julgar adequada.

#+begin_src bash :exports code
# git@servidor-remoto

mkdir -p /srv/git && cd /srv/git
mkdir projeto.git
cd projeto.git
git init --bare
#+end_src

** Inicialize a cópia local

Como esse guia visa a criação de um repositório hospedado localmente e
criptografado em ambos remoto e cópias locais, precisamos, antes de criar o
primeiro =commit= do repositório, inicializar nossas ferramentas de
criptografia.

*** Criando um diretório criptografado

Utilizando a ferramenta =ecryptfs=, criaremos um diretório privado para o
usuário na sua Home, com o intuito de guardar os dados do repositório remoto.

#+begin_src bash :exports code
# admin@pc-local

# certifique-se que o módulo do kernel está carregado
modprobe ecryptfs

# configure o diretório privado, seguindo os passos dados pela aplicação
ecryptfs-setup-private --nopwcheck --noautomount
# o mount point default é em ~/Private
mv ~/Private ~/meu_projeto
echo $(readlink -f meu_projeto) > ~/.ecryptfs/Private.mnt
ecryptfs-mount-private
#+end_src

Assim teremos um diretório criptografado de maneira transparente pela
ferramenta.

*** Importando as chaves dos colaboradores

Para importar as chaves privadas dos colaboradores, peça que executem os
seguintes comandos:

#+begin_src bash :exports code
# admin@pc-local

gpg --list-keys --keyid-format long
#+end_src

Na saída do comando, os usuários verão uma lista no seguinte formato:

#+begin_example
/home/<USER>/.gnupg/pubring.kbx
---------------------------------
pub   <TIPO_E_TAMANHO>/<ID_LONGO> <DATA_CRIACAO>
      <FINGERPRINT_COMPLETO>
uid                 <COMENTARIOS>
sub   <TIPO_E_TAMANHO>/<ID_SUBCHAVE> <DATA_CRIACAO> [E]
#+end_example

Após identificar a chave que escolheram, peça que a exportem através do seguinte
comando:

#+begin_src bash :exports code
gpg --armor --export <ID_LONGO> > chave_joao.asc
#+end_src

E que enviem esse arquivo para o administrador responsável. Assim, para importar
as chaves dos colaboradores, execute:

#+begin_src bash :exports code
# admin@pc-local

gpg --import chave_joao.asc
gpg --import chave_maria.asc
gpg --import chave_jose.asc
#+end_src

*** Criando a primeira versão

Agora podemos iniciar a configuração da criptografia do remoto através do URI
especial da ferramenta =git-remote-gcrypt=:

#+begin_src bash :exports code
# admin@pc-local

cd ~/meu_projeto
git init
git remote add origin gcrypt::git@servidor:/srv/git/projeto.git
#+end_src

e agora adicionamos as chaves =gpg= dos colaboradores:

#+begin_src bash :exports code
# admin@pc-local

# para visualizar as chaves públicas no seu keyring, utilize:
gpg --list-keys --keyid-format long
# adicione as chaves publicas dos participantes:
git config remote.origin.gcrypt-participants \
    "ID-CHAVE-JOÃO ID-CHAVE-MARIA ID-CHAVE-JOSÉ"
#+end_src

Agora podemos finalmente inicializar o repositório com arquivos:

#+begin_src bash :exports code
# admin@pc-local

vim README.md
git add README.md
git commit -m "commit inicial"
git push -u origin master
#+end_src

** Configure o usuário

A fim de que esse usuário somente realize comandos =git=, altere sua =shell=
padrão para a =git-shell=, que está incluída no pacote =git=.

#+begin_src bash :exports code
# admin@servidor-remoto

sudo chsh git -s $(which git-shell)
#+end_src

Assim, nenhum dos colaboradores que adicionaremos poderá iniciar uma sessão
interativa por SSH pelo usuário git.

* Utilizando o servidor

Com o repositório configurado e clonado na sua máquina, nessa subseção
abordaremos algumas ações comuns ao utilizar esse servidor.

** /Clone/ do repositório

Se um colaborador quiser clonar o repositório *já configurado*, utilize o
/script/ [[./scripts/clone.sh][clone.sh]].

O /script/ por completo é esse (a conversão do GitHub para markdown não suporta
/includes/ de arquivos externos):

#+include: "scripts/clone.sh" src shell

** /Mount/ e /Unmount/ do diretório privado criptografado

Utilize os seguintes comandos para isso:

#+begin_src bash :exports code
# usuario@local

# para o mount
ecryptfs-mount-private

# para o unmount
ecryptfs-umount-private
#+end_src

Além disso, certifique-se que o módulo de kernel =ecryptfs= foi carregado
corretamente através do comando:

#+begin_src bash :exports code
# usuario@pc-local

modprobe ecryptfs
#+end_src

** Trabalho no repositório

A criptografia do remoto é transparente para os clones, assim o /workflow/ é
exatamente igual a qualquer outro repositório comum:

#+begin_src bash :exports code
# usuario@local

vim <arquivo>
git commit -am "mensagem de commit relevante"
git push -u origin master
# ou qualquer outra branch existente
#+end_src

** Utilização de submódulos

Na sua configuração padrão, o =git= não permite a utilização de remotos com URIs
com protocolos customizados, como o nosso =gcrypt::=.
